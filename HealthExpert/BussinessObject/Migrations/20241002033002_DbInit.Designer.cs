// <auto-generated />
using System;
using BussinessObject.ContextData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(HealthExpertContext))]
    [Migration("20241002033002_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObject.Model.Authen.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roleId"));

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            roleId = 1,
                            roleName = "Administration"
                        },
                        new
                        {
                            roleId = 2,
                            roleName = "ServiceCenter"
                        },
                        new
                        {
                            roleId = 3,
                            roleName = "Teacher"
                        },
                        new
                        {
                            roleId = 4,
                            roleName = "Learner"
                        });
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course", b =>
                {
                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ServiceCenteraccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceCentercourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("bmiMax")
                        .HasColumnType("float");

                    b.Property<double>("bmiMin")
                        .HasColumnType("float");

                    b.Property<string>("certificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<int>("studentNumber")
                        .HasColumnType("int");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.HasIndex("ServiceCenteraccountId", "ServiceCentercourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course_Teacher_Mapping", b =>
                {
                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<string>("TeachercourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("teacherId1")
                        .HasColumnType("int");

                    b.HasKey("courseId", "teacherId");

                    b.HasIndex("teacherId1", "TeachercourseId");

                    b.ToTable("GetCourse_Teacher_Mappings");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.CurrentProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentLessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentSessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("courseId")
                        .IsUnique();

                    b.ToTable("CurrentProgresses");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Enrollment", b =>
                {
                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("enrollDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("enrollStatus")
                        .HasColumnType("bit");

                    b.HasKey("accountId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Feedback", b =>
                {
                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("feedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("accountId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.ServiceCenter", b =>
                {
                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("accountId", "courseId");

                    b.ToTable("ServiceCenters");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("teacherId", "courseId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Type", b =>
                {
                    b.Property<string>("typeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("typeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typeId");

                    b.HasIndex("courseId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelNutrition.Nutrition", b =>
                {
                    b.Property<string>("nutriId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("sessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nutriId");

                    b.ToTable("Nutritions");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.Bill", b =>
                {
                    b.Property<Guid>("billId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("bankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankTranNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("billTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("orderInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("responseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("billId");

                    b.HasIndex("accountId");

                    b.HasIndex("orderId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.Order", b =>
                {
                    b.Property<Guid>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("accountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("orderTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("orderId");

                    b.HasIndex("courseId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.OrderStatus", b =>
                {
                    b.Property<Guid>("orderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("orderStatusId");

                    b.HasIndex("orderId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryId"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post", b =>
                {
                    b.Property<Guid>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("likeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("publishAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("postId");

                    b.HasIndex("accountId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.PostDetail", b =>
                {
                    b.Property<Guid>("postDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("postDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("postId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("postTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postDetailId");

                    b.HasIndex("postId");

                    b.ToTable("PostDetails");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Category", b =>
                {
                    b.Property<Guid>("postId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.HasKey("postId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("Post_Category");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Like", b =>
                {
                    b.Property<int>("postLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postLikeId"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("postId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postLikeId");

                    b.HasIndex("postId");

                    b.ToTable("Post_Likes");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Meta", b =>
                {
                    b.Property<int>("postMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postMetaId"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hashTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("postId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("postMetaId");

                    b.HasIndex("postId");

                    b.ToTable("Post_Metas");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelSession.Lesson", b =>
                {
                    b.Property<string>("lessonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("sessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("videoFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("viewProgress")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("lessonId");

                    b.HasIndex("sessionId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelSession.Session", b =>
                {
                    b.Property<string>("sessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("courseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("learnProgress")
                        .HasColumnType("bit");

                    b.Property<string>("scoreResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("sessionId");

                    b.HasIndex("courseId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Accomplishment", b =>
                {
                    b.Property<int>("acplId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("acplId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("acplDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("acpltName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("receptDate")
                        .HasColumnType("datetime2");

                    b.HasKey("acplId");

                    b.HasIndex("accountId");

                    b.ToTable("Accomplishments");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Account", b =>
                {
                    b.Property<Guid>("accountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceCenteraccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceCentercourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachercourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("gender")
                        .HasColumnType("bit");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("passwordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("resetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.Property<int?>("teacherId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("verifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("accountId");

                    b.HasIndex("roleId");

                    b.HasIndex("ServiceCenteraccountId", "ServiceCentercourseId");

                    b.HasIndex("teacherId", "TeachercourseId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Avatar", b =>
                {
                    b.Property<int>("avatarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("avatarId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("avatarName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("uploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("avatarId");

                    b.HasIndex("accountId");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.BMI", b =>
                {
                    b.Property<int>("bmiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bmiId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("bmiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("bmiStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("bmiValue")
                        .HasColumnType("float");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("bmiId");

                    b.HasIndex("accountId");

                    b.ToTable("Bmis");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Photo", b =>
                {
                    b.Property<int>("photoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("photoId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("photoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("uploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("photoId");

                    b.HasIndex("accountId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("NutritionSession", b =>
                {
                    b.Property<string>("NutritionsnutriId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SessionssessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NutritionsnutriId", "SessionssessionId");

                    b.HasIndex("SessionssessionId");

                    b.ToTable("NutritionSession");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.ServiceCenter", "ServiceCenter")
                        .WithMany("Courses")
                        .HasForeignKey("ServiceCenteraccountId", "ServiceCentercourseId");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course_Teacher_Mapping", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "Course")
                        .WithMany("course_Teacher_Mappings")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("teacherId1", "TeachercourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.CurrentProgress", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany("CurrentProgresses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "Course")
                        .WithOne("CurrentProgress")
                        .HasForeignKey("BussinessObject.Model.ModelCourse.CurrentProgress", "courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Enrollment", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany("Enrollments")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Feedback", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Type", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.Course", null)
                        .WithMany("Types")
                        .HasForeignKey("courseId");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.Bill", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelPayment.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("order");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.Order", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "Course")
                        .WithMany("Orders")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.OrderStatus", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPayment.Order", "order")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("orderId");

                    b.Navigation("order");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany("Posts")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.PostDetail", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Post", "Post")
                        .WithMany("PostDetails")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Category", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Category", "Category")
                        .WithMany("Post_Categories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelPost.Post", "Post")
                        .WithMany("Post_Categories")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Like", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Post", "Post")
                        .WithMany("Post_Likes")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Meta", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Post", "Post")
                        .WithMany("Post_Metas")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelSession.Lesson", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelSession.Session", "Session")
                        .WithMany("Lessons")
                        .HasForeignKey("sessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelSession.Session", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Accomplishment", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Account", b =>
                {
                    b.HasOne("BussinessObject.Model.Authen.Role", "Role")
                        .WithMany("Account")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.ServiceCenter", "ServiceCenter")
                        .WithMany("Account")
                        .HasForeignKey("ServiceCenteraccountId", "ServiceCentercourseId");

                    b.HasOne("BussinessObject.Model.ModelCourse.Teacher", "Teacher")
                        .WithMany("Accounts")
                        .HasForeignKey("teacherId", "TeachercourseId");

                    b.Navigation("Role");

                    b.Navigation("ServiceCenter");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Avatar", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.BMI", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Photo", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "Account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NutritionSession", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelNutrition.Nutrition", null)
                        .WithMany()
                        .HasForeignKey("NutritionsnutriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelSession.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionssessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BussinessObject.Model.Authen.Role", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course", b =>
                {
                    b.Navigation("CurrentProgress");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Sessions");

                    b.Navigation("Types");

                    b.Navigation("course_Teacher_Mappings");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.ServiceCenter", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Teacher", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPayment.Order", b =>
                {
                    b.Navigation("OrderStatuses");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Category", b =>
                {
                    b.Navigation("Post_Categories");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post", b =>
                {
                    b.Navigation("PostDetails");

                    b.Navigation("Post_Categories");

                    b.Navigation("Post_Likes");

                    b.Navigation("Post_Metas");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelSession.Session", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Account", b =>
                {
                    b.Navigation("CurrentProgresses");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
